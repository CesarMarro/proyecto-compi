// JavaCUP specification file

// Package declaration
package parser;

// **Terminal declarations**
terminal CLASS, PROGRAM, VOID, INT, BOOLEAN, IF, ELSE, FOR, RETURN, BREAK, CONTINUE, CALLOUT, TRUE, FALSE;
terminal ASSIGN, SUS_ASIGN, SUM_ASIGN, SUM, SUS, MULTIPLICATION, DIVIDE, MOD;
terminal LESS_THAN, MORE_THAN, LESS_THAN_OR_EQUAL, MORE_THAN_OR_EQUAL, EQUAL, DIFFERENT, AND, OR;
terminal OPEN_BRACE, CLOSE_BRACE, OPEN_BRACKET, CLOSE_BRACKET, OPEN_PARE, CLOSE_PARE;
terminal NOT, SEMICOLON, COMMA, DOT;
terminal CHAR_LITERAL, STRING_LITERAL, HEX_LITERAL, INT_LITERAL, HEX_DIGIT, ID, ERROR;

// **Nonterminal declarations**
nonterminal program;
nonterminal decl_list;
nonterminal declaration;
nonterminal field_decl;
nonterminal var_decl_list;
nonterminal var_decl;
nonterminal method_decl;
nonterminal type;
nonterminal param_list;
nonterminal param_list_nonempty;
nonterminal param;
nonterminal block;
nonterminal opt_var_decls;
nonterminal var_decls;
nonterminal var_decl_list_block;
nonterminal var_decl_block;
nonterminal var_decl_block_item;
nonterminal opt_statements;
nonterminal statements;
nonterminal statement;
nonterminal matched_stmt;
nonterminal unmatched_stmt;
nonterminal basic_stmt;
nonterminal location;
nonterminal expr;
nonterminal assign_op;
nonterminal method_call;
nonterminal opt_callout_args;
nonterminal callout_arg_list;
nonterminal callout_arg;
nonterminal bin_op;
nonterminal arith_op;
nonterminal rel_op;
nonterminal eq_op;
nonterminal cond_op;
nonterminal literal;
nonterminal int_literal;
nonterminal char_literal;
nonterminal bool_literal;

// **Precedence and associativity declarations**
precedence left OR;
precedence left AND;
precedence left EQUAL, DIFFERENT;
precedence left LESS_THAN, MORE_THAN, LESS_THAN_OR_EQUAL, MORE_THAN_OR_EQUAL;
precedence left SUM, SUS;
precedence left MULTIPLICATION, DIVIDE, MOD;

// **Start symbol declaration**
start with program;

// **Production rules**
program ::= CLASS PROGRAM OPEN_BRACE decl_list CLOSE_BRACE ;

decl_list ::= /* empty */
            | decl_list declaration ;

declaration ::= field_decl
              | method_decl ;

field_decl ::= type var_decl_list SEMICOLON ;

var_decl_list ::= var_decl_list COMMA var_decl
                | var_decl ;

var_decl ::= ID
           | ID ASSIGN expr ;

method_decl ::= type ID OPEN_PARE param_list CLOSE_PARE block
              | VOID ID OPEN_PARE param_list CLOSE_PARE block ;

param_list ::= /* empty */
             | param_list_nonempty ;

param_list_nonempty ::= param_list_nonempty COMMA param
                      | param ;

param ::= type ID ;

type ::= INT
       | BOOLEAN ;

block ::= OPEN_BRACE opt_var_decls opt_statements CLOSE_BRACE ;

opt_var_decls ::= /* empty */
                | var_decls ;

var_decls ::= var_decls var_decl_block
            | var_decl_block ;

var_decl_block ::= type var_decl_list_block SEMICOLON ;

var_decl_list_block ::= var_decl_list_block COMMA var_decl_block_item
                      | var_decl_block_item ;

var_decl_block_item ::= ID
                      | ID ASSIGN expr ;

opt_statements ::= /* empty */
                 | statements ;

statements ::= statements statement
             | statement ;

statement ::= matched_stmt
            | unmatched_stmt ;

matched_stmt ::= basic_stmt
               | IF OPEN_PARE expr CLOSE_PARE matched_stmt ELSE matched_stmt
               | FOR OPEN_PARE ID ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARE matched_stmt
               | block ;

unmatched_stmt ::= IF OPEN_PARE expr CLOSE_PARE statement
                 | IF OPEN_PARE expr CLOSE_PARE matched_stmt ELSE unmatched_stmt ;

basic_stmt ::= location assign_op expr SEMICOLON
             | method_call SEMICOLON
             | RETURN expr SEMICOLON
             | BREAK SEMICOLON
             | CONTINUE SEMICOLON ;

/* Remove if_statement and else_part productions, as they are replaced by matched_stmt and unmatched_stmt */

location ::= ID
           | ID OPEN_BRACKET expr CLOSE_BRACKET ;

assign_op ::= ASSIGN
            | SUM_ASIGN
            | SUS_ASIGN ;

method_call ::= ID OPEN_PARE opt_callout_args CLOSE_PARE ;

opt_callout_args ::= /* empty */
                   | callout_arg_list ;

callout_arg_list ::= callout_arg_list COMMA callout_arg
                   | callout_arg ;

callout_arg ::= expr
              | STRING_LITERAL ;

expr ::= location
       | method_call
       | literal
       | OPEN_PARE expr CLOSE_PARE
       | expr bin_op expr ;

bin_op ::= arith_op
         | rel_op
         | eq_op
         | cond_op ;

arith_op ::= SUM
           | SUS
           | MULTIPLICATION
           | DIVIDE
           | MOD ;

rel_op ::= LESS_THAN
         | MORE_THAN
         | LESS_THAN_OR_EQUAL
         | MORE_THAN_OR_EQUAL ;

eq_op ::= EQUAL
        | DIFFERENT ;

cond_op ::= AND
          | OR ;

literal ::= int_literal
          | char_literal
          | bool_literal ;

int_literal ::= INT_LITERAL ;
char_literal ::= CHAR_LITERAL ;
bool_literal ::= TRUE
               | FALSE ;
