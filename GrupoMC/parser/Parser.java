
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\003\000\002\005" +
    "\004\000\002\005\003\000\002\004\006\000\002\004\007" +
    "\000\002\004\005\000\002\004\007\000\002\004\013\000" +
    "\002\004\005\000\002\004\004\000\002\004\004\000\002" +
    "\004\005\000\002\004\007\000\002\004\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\032\024\014\030\015\036\016\037\011\040" +
    "\012\041\007\043\013\045\006\046\023\047\020\052\022" +
    "\056\004\001\002\000\016\030\015\036\016\037\011\040" +
    "\012\041\007\043\027\001\002\000\036\002\ufffe\024\ufffe" +
    "\025\ufffe\030\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\043" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\052\ufffe\056\ufffe\001\002" +
    "\000\016\030\103\036\016\037\011\040\012\041\007\043" +
    "\027\001\002\000\042\007\uffe3\010\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\025\uffe3\031\uffe3\033\uffe3\001\002" +
    "\000\004\002\102\001\002\000\042\007\uffe1\010\uffe1\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\025\uffe1\031\uffe1\033" +
    "\uffe1\001\002\000\042\007\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\025\uffe0\031\uffe0\033\uffe0\001\002" +
    "\000\042\004\074\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\030\073\033\uffe4\001\002\000\032\024" +
    "\014\030\015\036\016\037\011\040\012\041\007\043\013" +
    "\045\006\046\023\047\020\052\022\056\004\001\002\000" +
    "\016\030\015\036\016\037\011\040\012\041\007\043\027" +
    "\001\002\000\042\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\025\uffe2\031\uffe2\033\uffe2\001\002\000" +
    "\036\007\033\010\043\011\046\012\034\013\037\014\040" +
    "\015\036\016\032\017\044\020\042\021\041\022\031\023" +
    "\045\033\066\001\002\000\004\033\065\001\002\000\034" +
    "\002\000\024\014\030\015\036\016\037\011\040\012\041" +
    "\007\043\013\045\006\046\023\047\020\052\022\056\004" +
    "\001\002\000\004\064\025\001\002\000\004\033\024\001" +
    "\002\000\036\002\ufff7\024\ufff7\025\ufff7\030\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\043\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\052\ufff7\056\ufff7\001\002\000\004\024\026\001\002" +
    "\000\016\030\015\036\016\037\011\040\012\041\007\043" +
    "\027\001\002\000\042\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\025\uffe4\031\uffe4\033\uffe4\001\002" +
    "\000\036\007\033\010\043\011\046\012\034\013\037\014" +
    "\040\015\036\016\032\017\044\020\042\021\041\022\031" +
    "\023\045\025\035\001\002\000\016\030\015\036\016\037" +
    "\011\040\012\041\007\043\027\001\002\000\016\030\015" +
    "\036\016\037\011\040\012\041\007\043\027\001\002\000" +
    "\016\030\015\036\016\037\011\040\012\041\007\043\027" +
    "\001\002\000\016\030\015\036\016\037\011\040\012\041" +
    "\007\043\027\001\002\000\036\002\ufff4\024\ufff4\025\ufff4" +
    "\030\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\043\ufff4\045" +
    "\ufff4\046\ufff4\047\ufff4\052\ufff4\056\ufff4\001\002\000\016" +
    "\030\015\036\016\037\011\040\012\041\007\043\027\001" +
    "\002\000\016\030\015\036\016\037\011\040\012\041\007" +
    "\043\027\001\002\000\016\030\015\036\016\037\011\040" +
    "\012\041\007\043\027\001\002\000\016\030\015\036\016" +
    "\037\011\040\012\041\007\043\027\001\002\000\016\030" +
    "\015\036\016\037\011\040\012\041\007\043\027\001\002" +
    "\000\016\030\015\036\016\037\011\040\012\041\007\043" +
    "\027\001\002\000\016\030\015\036\016\037\011\040\012" +
    "\041\007\043\027\001\002\000\016\030\015\036\016\037" +
    "\011\040\012\041\007\043\027\001\002\000\016\030\015" +
    "\036\016\037\011\040\012\041\007\043\027\001\002\000" +
    "\042\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\025\ufff0\031\ufff0\033\ufff0\001\002\000\042\007\033" +
    "\010\043\011\046\012\034\013\037\014\040\015\036\016" +
    "\032\017\044\020\042\021\041\022\031\023\uffe6\025\uffe6" +
    "\031\uffe6\033\uffe6\001\002\000\042\007\033\010\043\011" +
    "\046\012\034\013\037\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\025\uffea\031\uffea\033" +
    "\uffea\001\002\000\042\007\ufff1\010\ufff1\011\046\012\034" +
    "\013\037\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\025\ufff1\031\ufff1\033\ufff1\001\002" +
    "\000\042\007\033\010\043\011\046\012\034\013\037\014" +
    "\040\015\036\016\032\017\044\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\025\uffe9\031\uffe9\033\uffe9\001\002\000\042\007" +
    "\033\010\043\011\046\012\034\013\037\014\040\015\036" +
    "\016\032\017\044\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025" +
    "\uffe8\031\uffe8\033\uffe8\001\002\000\042\007\033\010\043" +
    "\011\046\012\034\013\037\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\025\uffed\031\uffed" +
    "\033\uffed\001\002\000\042\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\023\uffee\025\uffee\031\uffee\033\uffee\001" +
    "\002\000\042\007\033\010\043\011\046\012\034\013\037" +
    "\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\025\uffec\031\uffec\033\uffec\001\002\000\042" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\025\uffef\031\uffef\033\uffef\001\002\000\042\007\ufff2\010" +
    "\ufff2\011\046\012\034\013\037\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\025\ufff2\031" +
    "\ufff2\033\ufff2\001\002\000\042\007\033\010\043\011\046" +
    "\012\034\013\037\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\031\uffeb\033\uffeb" +
    "\001\002\000\042\007\033\010\043\011\046\012\034\013" +
    "\037\014\040\015\036\016\032\017\044\020\042\021\041" +
    "\022\uffe7\023\uffe7\025\uffe7\031\uffe7\033\uffe7\001\002\000" +
    "\036\002\uffff\024\uffff\025\uffff\030\uffff\036\uffff\037\uffff" +
    "\040\uffff\041\uffff\043\uffff\045\uffff\046\uffff\047\uffff\052" +
    "\uffff\056\uffff\001\002\000\036\002\ufff6\024\ufff6\025\ufff6" +
    "\030\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\043\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\052\ufff6\056\ufff6\001\002\000\036" +
    "\002\ufff3\024\ufff3\025\ufff3\030\ufff3\036\ufff3\037\ufff3\040" +
    "\ufff3\041\ufff3\043\ufff3\045\ufff3\046\ufff3\047\ufff3\052\ufff3" +
    "\056\ufff3\001\002\000\036\007\033\010\043\011\046\012" +
    "\034\013\037\014\040\015\036\016\032\017\044\020\042" +
    "\021\041\022\031\023\045\031\070\001\002\000\042\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\025" +
    "\uffe5\031\uffe5\033\uffe5\001\002\000\034\024\014\025\072" +
    "\030\015\036\016\037\011\040\012\041\007\043\013\045" +
    "\006\046\023\047\020\052\022\056\004\001\002\000\036" +
    "\002\ufffb\024\ufffb\025\ufffb\030\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\043\ufffb\045\ufffb\046\ufffb\047\ufffb\052\ufffb" +
    "\056\ufffb\001\002\000\016\030\015\036\016\037\011\040" +
    "\012\041\007\043\027\001\002\000\016\030\015\036\016" +
    "\037\011\040\012\041\007\043\027\001\002\000\036\007" +
    "\033\010\043\011\046\012\034\013\037\014\040\015\036" +
    "\016\032\017\044\020\042\021\041\022\031\023\045\033" +
    "\076\001\002\000\036\002\ufffd\024\ufffd\025\ufffd\030\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\041\ufffd\043\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\052\ufffd\056\ufffd\001\002\000\036\007\033" +
    "\010\043\011\046\012\034\013\037\014\040\015\036\016" +
    "\032\017\044\020\042\021\041\022\031\023\045\031\100" +
    "\001\002\000\004\033\101\001\002\000\036\002\ufffc\024" +
    "\ufffc\025\ufffc\030\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc" +
    "\043\ufffc\045\ufffc\046\ufffc\047\ufffc\052\ufffc\056\ufffc\001" +
    "\002\000\004\002\001\001\002\000\016\030\015\036\016" +
    "\037\011\040\012\041\007\043\027\001\002\000\036\007" +
    "\033\010\043\011\046\012\034\013\037\014\040\015\036" +
    "\016\032\017\044\020\042\021\041\022\031\023\045\033" +
    "\105\001\002\000\036\002\ufff8\024\ufff8\025\ufff8\030\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\043\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\052\ufff8\056\ufff8\001\002\000\040\007\033" +
    "\010\043\011\046\012\034\013\037\014\040\015\036\016" +
    "\032\017\044\020\042\021\041\022\031\023\045\031\110" +
    "\033\107\001\002\000\016\030\015\036\016\037\011\040" +
    "\012\041\007\043\027\001\002\000\066\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\014\030\015" +
    "\033\uffe5\036\016\037\011\040\012\041\007\043\013\045" +
    "\006\046\023\047\020\052\022\056\004\001\002\000\036" +
    "\002\ufffa\024\ufffa\025\ufffa\030\ufffa\036\ufffa\037\ufffa\040" +
    "\ufffa\041\ufffa\043\ufffa\045\ufffa\046\ufffa\047\ufffa\052\ufffa" +
    "\056\ufffa\001\002\000\036\007\033\010\043\011\046\012" +
    "\034\013\037\014\040\015\036\016\032\017\044\020\042" +
    "\021\041\022\031\023\045\033\113\001\002\000\016\030" +
    "\015\036\016\037\011\040\012\041\007\043\027\001\002" +
    "\000\036\007\033\010\043\011\046\012\034\013\037\014" +
    "\040\015\036\016\032\017\044\020\042\021\041\022\031" +
    "\023\045\031\115\001\002\000\032\024\014\030\015\036" +
    "\016\037\011\040\012\041\007\043\013\045\006\046\023" +
    "\047\020\052\022\056\004\001\002\000\036\002\ufff9\024" +
    "\ufff9\025\ufff9\030\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9" +
    "\043\ufff9\045\ufff9\046\ufff9\047\ufff9\052\ufff9\056\ufff9\001" +
    "\002\000\036\007\033\010\043\011\046\012\034\013\037" +
    "\014\040\015\036\016\032\017\044\020\042\021\041\022" +
    "\031\023\045\033\120\001\002\000\036\002\ufff5\024\ufff5" +
    "\025\ufff5\030\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\043" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\052\ufff5\056\ufff5\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\012\002\007\003\016\004\004\005\020\001" +
    "\001\000\004\003\116\001\001\000\002\001\001\000\004" +
    "\003\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\016\004\004\005\070\001\001\000\004\003\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\016\004\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\062\001\001\000\004\003\061\001\001\000\004" +
    "\003\060\001\001\000\004\003\057\001\001\000\002\001" +
    "\001\000\004\003\056\001\001\000\004\003\055\001\001" +
    "\000\004\003\054\001\001\000\004\003\053\001\001\000" +
    "\004\003\052\001\001\000\004\003\051\001\001\000\004" +
    "\003\050\001\001\000\004\003\047\001\001\000\004\003" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\016\004\063\001\001\000\002\001\001\000\004\003\076" +
    "\001\001\000\004\003\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\111\001\001\000\006\003\016\004\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\113\001\001" +
    "\000\002\001\001\000\006\003\016\004\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  // Custom parser code can be added here if needed


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmt_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_list ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= ID ASSIGN expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= ID OPEN_PARE expr CLOSE_PARE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= RESERVADAS OPEN_PARE expr CLOSE_PARE stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= RESERVADAS OPEN_PARE expr SEMICOLON expr SEMICOLON expr CLOSE_PARE stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= RESERVADAS expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= INT expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= CLASS PROGRAM OPEN_BRACE expr CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr SUM expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr SUS expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr MULTIPLICATION expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr DIVIDE expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr MOD expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr LESS_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr MORE_THAN expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr LESS_THAN_OR_EQUAL expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr MORE_THAN_OR_EQUAL expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr EQUAL expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr DIFFERENT expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr AND expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr OR expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= OPEN_PARE expr CLOSE_PARE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
