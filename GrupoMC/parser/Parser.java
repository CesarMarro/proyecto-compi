
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import parser.Program;
import parser.StmtList;
import parser.Stmt;
import parser.Expr;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\003\000\002\005" +
    "\004\000\002\005\003\000\002\004\006\000\002\004\007" +
    "\000\002\004\005\000\002\004\007\000\002\004\013\000" +
    "\002\004\005\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\026\024\013\030\014\036\015\037\010\040" +
    "\011\041\006\043\012\045\005\046\021\047\017\001\002" +
    "\000\032\002\ufffe\024\ufffe\025\ufffe\030\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\043\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\001\002\000\016\030\075\036\015\037\010\040\011\041" +
    "\006\043\043\001\002\000\040\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\031\uffe5\033\uffe5\001\002" +
    "\000\004\002\074\001\002\000\040\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\023\uffe3\031\uffe3\033\uffe3\001" +
    "\002\000\040\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\031\uffe2\033\uffe2\001\002\000\042\004\066" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\030\065\033\uffe6\001\002\000\026\024\013\030\014\036" +
    "\015\037\010\040\011\041\006\043\012\045\005\046\021" +
    "\047\017\001\002\000\016\030\014\036\015\037\010\040" +
    "\011\041\006\043\043\001\002\000\040\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\031\uffe4\033\uffe4" +
    "\001\002\000\036\007\030\010\037\011\042\012\027\013" +
    "\032\014\034\015\031\016\026\017\040\020\035\021\033" +
    "\022\025\023\041\033\036\001\002\000\004\033\024\001" +
    "\002\000\030\002\000\024\013\030\014\036\015\037\010" +
    "\040\011\041\006\043\012\045\005\046\021\047\017\001" +
    "\002\000\004\033\022\001\002\000\032\002\ufff7\024\ufff7" +
    "\025\ufff7\030\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\043" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\001\002\000\032\002\uffff" +
    "\024\uffff\025\uffff\030\uffff\036\uffff\037\uffff\040\uffff\041" +
    "\uffff\043\uffff\045\uffff\046\uffff\047\uffff\001\002\000\032" +
    "\002\ufff6\024\ufff6\025\ufff6\030\ufff6\036\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\043\ufff6\045\ufff6\046\ufff6\047\ufff6\001\002" +
    "\000\016\030\014\036\015\037\010\040\011\041\006\043" +
    "\043\001\002\000\016\030\014\036\015\037\010\040\011" +
    "\041\006\043\043\001\002\000\016\030\014\036\015\037" +
    "\010\040\011\041\006\043\043\001\002\000\016\030\014" +
    "\036\015\037\010\040\011\041\006\043\043\001\002\000" +
    "\016\030\014\036\015\037\010\040\011\041\006\043\043" +
    "\001\002\000\016\030\014\036\015\037\010\040\011\041" +
    "\006\043\043\001\002\000\016\030\014\036\015\037\010" +
    "\040\011\041\006\043\043\001\002\000\016\030\014\036" +
    "\015\037\010\040\011\041\006\043\043\001\002\000\016" +
    "\030\014\036\015\037\010\040\011\041\006\043\043\001" +
    "\002\000\032\002\ufff5\024\ufff5\025\ufff5\030\ufff5\036\ufff5" +
    "\037\ufff5\040\ufff5\041\ufff5\043\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\001\002\000\016\030\014\036\015\037\010\040\011" +
    "\041\006\043\043\001\002\000\016\030\014\036\015\037" +
    "\010\040\011\041\006\043\043\001\002\000\016\030\014" +
    "\036\015\037\010\040\011\041\006\043\043\001\002\000" +
    "\016\030\014\036\015\037\010\040\011\041\006\043\043" +
    "\001\002\000\040\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\031\uffe6\033\uffe6\001\002\000\040\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\031" +
    "\ufff2\033\ufff2\001\002\000\040\007\030\010\037\011\042" +
    "\012\027\013\032\014\034\015\031\016\026\017\040\020" +
    "\035\021\033\022\025\023\uffe8\031\uffe8\033\uffe8\001\002" +
    "\000\040\007\030\010\037\011\042\012\027\013\032\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\031\uffec\033\uffec\001\002\000\040\007\ufff3\010" +
    "\ufff3\011\042\012\027\013\032\014\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\031\ufff3\033" +
    "\ufff3\001\002\000\040\007\030\010\037\011\042\012\027" +
    "\013\032\014\034\015\031\016\026\017\040\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\031\uffeb\033\uffeb\001\002\000\040" +
    "\007\030\010\037\011\042\012\027\013\032\014\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\031\uffef\033\uffef\001\002\000\040\007\030\010\037\011" +
    "\042\012\027\013\032\014\034\015\031\016\026\017\040" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\031\uffea\033\uffea\001" +
    "\002\000\040\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\031\ufff0\033\ufff0\001\002\000\040\007\030" +
    "\010\037\011\042\012\027\013\032\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\031\uffee" +
    "\033\uffee\001\002\000\040\007\ufff4\010\ufff4\011\042\012" +
    "\027\013\032\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\031\ufff4\033\ufff4\001\002\000" +
    "\040\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\031\ufff1\033\ufff1\001\002\000\040\007\030\010\037" +
    "\011\042\012\027\013\032\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\031\uffed\033\uffed" +
    "\001\002\000\040\007\030\010\037\011\042\012\027\013" +
    "\032\014\034\015\031\016\026\017\040\020\035\021\033" +
    "\022\uffe9\023\uffe9\031\uffe9\033\uffe9\001\002\000\036\007" +
    "\030\010\037\011\042\012\027\013\032\014\034\015\031" +
    "\016\026\017\040\020\035\021\033\022\025\023\041\031" +
    "\062\001\002\000\040\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\031\uffe7\033\uffe7\001\002\000\030" +
    "\024\013\025\064\030\014\036\015\037\010\040\011\041" +
    "\006\043\012\045\005\046\021\047\017\001\002\000\032" +
    "\002\ufffb\024\ufffb\025\ufffb\030\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\043\ufffb\045\ufffb\046\ufffb\047\ufffb\001\002" +
    "\000\016\030\014\036\015\037\010\040\011\041\006\043" +
    "\043\001\002\000\016\030\014\036\015\037\010\040\011" +
    "\041\006\043\043\001\002\000\036\007\030\010\037\011" +
    "\042\012\027\013\032\014\034\015\031\016\026\017\040" +
    "\020\035\021\033\022\025\023\041\033\070\001\002\000" +
    "\032\002\ufffd\024\ufffd\025\ufffd\030\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd\001" +
    "\002\000\036\007\030\010\037\011\042\012\027\013\032" +
    "\014\034\015\031\016\026\017\040\020\035\021\033\022" +
    "\025\023\041\031\072\001\002\000\004\033\073\001\002" +
    "\000\032\002\ufffc\024\ufffc\025\ufffc\030\ufffc\036\ufffc\037" +
    "\ufffc\040\ufffc\041\ufffc\043\ufffc\045\ufffc\046\ufffc\047\ufffc" +
    "\001\002\000\004\002\001\001\002\000\016\030\014\036" +
    "\015\037\010\040\011\041\006\043\043\001\002\000\036" +
    "\007\030\010\037\011\042\012\027\013\032\014\034\015" +
    "\031\016\026\017\040\020\035\021\033\022\025\023\041" +
    "\033\077\001\002\000\032\002\ufff8\024\ufff8\025\ufff8\030" +
    "\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\043\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\001\002\000\040\007\030\010\037\011" +
    "\042\012\027\013\032\014\034\015\031\016\026\017\040" +
    "\020\035\021\033\022\025\023\041\031\102\033\101\001" +
    "\002\000\016\030\014\036\015\037\010\040\011\041\006" +
    "\043\043\001\002\000\062\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\013\030\014\033\uffe7\036" +
    "\015\037\010\040\011\041\006\043\012\045\005\046\021" +
    "\047\017\001\002\000\032\002\ufffa\024\ufffa\025\ufffa\030" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\043\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\001\002\000\036\007\030\010\037\011" +
    "\042\012\027\013\032\014\034\015\031\016\026\017\040" +
    "\020\035\021\033\022\025\023\041\033\105\001\002\000" +
    "\016\030\014\036\015\037\010\040\011\041\006\043\043" +
    "\001\002\000\036\007\030\010\037\011\042\012\027\013" +
    "\032\014\034\015\031\016\026\017\040\020\035\021\033" +
    "\022\025\023\041\031\107\001\002\000\026\024\013\030" +
    "\014\036\015\037\010\040\011\041\006\043\012\045\005" +
    "\046\021\047\017\001\002\000\032\002\ufff9\024\ufff9\025" +
    "\ufff9\030\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\043\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\106\000\012\002\006\003\015\004\003\005\017\001" +
    "\001\000\002\001\001\000\004\003\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\015\004\003\005\062" +
    "\001\001\000\004\003\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\015\004\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\057\001\001\000\004" +
    "\003\056\001\001\000\004\003\055\001\001\000\004\003" +
    "\054\001\001\000\004\003\053\001\001\000\004\003\052" +
    "\001\001\000\004\003\051\001\001\000\004\003\050\001" +
    "\001\000\004\003\047\001\001\000\002\001\001\000\004" +
    "\003\046\001\001\000\004\003\045\001\001\000\004\003" +
    "\044\001\001\000\004\003\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\015\004" +
    "\022\001\001\000\002\001\001\000\004\003\070\001\001" +
    "\000\004\003\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\103" +
    "\001\001\000\006\003\015\004\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\105\001\001\000\002" +
    "\001\001\000\006\003\015\004\107\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  // Custom parser code can be added here if needed


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmt_list 
            {
              Program RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_list ::= stmt_list stmt 
            {
              StmtList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_list ::= stmt 
            {
              StmtList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= ID ASSIGN expr SEMICOLON 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= ID OPEN_PARE expr CLOSE_PARE SEMICOLON 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= OPEN_BRACE stmt_list CLOSE_BRACE 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= RESERVADAS OPEN_PARE expr CLOSE_PARE stmt 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= RESERVADAS OPEN_PARE expr SEMICOLON expr SEMICOLON expr CLOSE_PARE stmt 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= RESERVADAS expr SEMICOLON 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= BREAK SEMICOLON 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= CONTINUE SEMICOLON 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= expr SEMICOLON 
            {
              Stmt RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr SUM expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr SUS expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr MULTIPLICATION expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr DIVIDE expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr MOD expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr LESS_THAN expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr MORE_THAN expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr LESS_THAN_OR_EQUAL expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr MORE_THAN_OR_EQUAL expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr EQUAL expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr DIFFERENT expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr AND expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr OR expr 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= OPEN_PARE expr CLOSE_PARE 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= ID 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= INT_LITERAL 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= CHAR_LITERAL 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= STRING_LITERAL 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= HEX_LITERAL 
            {
              Expr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
