package parser;

// Import necessary Java classes
import java_cup.runtime.*;

// Define the terminals (tokens)
terminal CLASS, PROGRAM, VOID, INT, BOOLEAN, IF, ELSE, FOR, RETURN, BREAK, CONTINUE, CALLOUT, TRUE, FALSE;
terminal ASSIGN, SUS_ASIGN, SUM_ASIGN, SUM, SUS, MULTIPLICATION, DIVIDE, MOD;
terminal LESS_THAN, MORE_THAN, LESS_THAN_OR_EQUAL, MORE_THAN_OR_EQUAL, EQUAL, DIFFERENT, AND, OR;
terminal OPEN_BRACE, CLOSE_BRACE, OPEN_BRACKET, CLOSE_BRACKET, OPEN_PARE, CLOSE_PARE;
terminal NOT, SEMICOLON, COMMA, DOT;
terminal CHAR_LITERAL, STRING_LITERAL, HEX_LITERAL, INT_LITERAL, HEX_DIGIT, ID, ERROR;

// Declare non-terminals
nonterminal program;
nonterminal field_decl;
nonterminal field_decls;
nonterminal method_decl;
nonterminal method_decls;
nonterminal type;
nonterminal var_decl;
nonterminal statement;
nonterminal block;
nonterminal location;
nonterminal expr;
nonterminal assign_op;
nonterminal method_call;
nonterminal callout_arg;
nonterminal bin_op;
nonterminal arith_op;
nonterminal rel_op;
nonterminal eq_op;
nonterminal cond_op;
nonterminal literal;
nonterminal int_literal;
nonterminal char_literal;
nonterminal bool_literal;

nonterminal param_list;
nonterminal param;
nonterminal param_list_rest;
nonterminal var_decls;
nonterminal statements;
nonterminal callout_args;
nonterminal callout_args_rest;
nonterminal if_statement;
nonterminal else_clause;

// Precedence and associativity
precedence left OR;
precedence left AND;
precedence left EQUAL, DIFFERENT;
precedence left LESS_THAN, MORE_THAN, LESS_THAN_OR_EQUAL, MORE_THAN_OR_EQUAL;
precedence left SUM, SUS;
precedence left MULTIPLICATION, DIVIDE, MOD;

// Production rules
program ::= CLASS PROGRAM OPEN_BRACE field_decls method_decls CLOSE_BRACE 
{ System.out.println("Parsed program: " + $1 + " " + $2); };

field_decls ::= field_decl field_decls;

field_decl ::= type ID SEMICOLON 
            | type ID ASSIGN expr SEMICOLON ;

method_decls ::= method_decl method_decls
              | /* empty */ ;

method_decl ::= type ID OPEN_PARE param_list CLOSE_PARE block ;

param_list ::= param param_list_rest
            | /* empty */ ;

param_list_rest ::= COMMA param param_list_rest
                | /* empty */ ;

param ::= type ID ;

type ::= INT
       | BOOLEAN
       | VOID
       | ID ;

var_decl ::= type ID SEMICOLON 
          | type ID ASSIGN expr SEMICOLON ;

block ::= OPEN_BRACE var_decls statements CLOSE_BRACE ;

var_decls ::= var_decl var_decls;


statements ::= statement statements;


statement ::= location assign_op expr SEMICOLON 
            | method_call SEMICOLON 
            | if_statement 
            | FOR OPEN_PARE ID ASSIGN expr SEMICOLON expr SEMICOLON expr CLOSE_PARE statement 
            | RETURN expr SEMICOLON 
            | BREAK SEMICOLON 
            | CONTINUE SEMICOLON 
            | block 
            ;

if_statement ::= IF OPEN_PARE expr CLOSE_PARE statement else_clause
               ;

else_clause ::= ELSE statement;


location ::= ID 
           | ID OPEN_BRACKET expr CLOSE_BRACKET ;

assign_op ::= ASSIGN 
           | SUM_ASIGN 
           | SUS_ASIGN ;

method_call ::= ID OPEN_PARE callout_args CLOSE_PARE ;

callout_args ::= callout_arg callout_args_rest
              | /* empty */ ;

callout_args_rest ::= COMMA callout_arg callout_args_rest
                  | /* empty */ ;

callout_arg ::= expr 
             | STRING_LITERAL ;

expr ::= location 
       | method_call 
       | literal 
       | expr bin_op expr 
       | OPEN_PARE expr CLOSE_PARE ;

bin_op ::= arith_op 
        | rel_op 
        | eq_op 
        | cond_op ;

arith_op ::= SUM 
          | SUS 
          | MULTIPLICATION 
          | DIVIDE 
          | MOD ;

rel_op ::= LESS_THAN 
        | MORE_THAN 
        | LESS_THAN_OR_EQUAL 
        | MORE_THAN_OR_EQUAL ;

eq_op ::= EQUAL 
       | DIFFERENT ;

cond_op ::= AND 
         | OR ;

literal ::= int_literal 
          | char_literal 
          | bool_literal ;

int_literal ::= INT_LITERAL ;
char_literal ::= CHAR_LITERAL ;
bool_literal ::= TRUE 
              | FALSE ;
